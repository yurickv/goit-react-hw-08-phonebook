{"version":3,"file":"static/js/245.a5196c36.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/Contact-style.module.css?c94d","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter-style.module.css?1f04","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/List-style.module.css?79f4","components/ContactList/ContactItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Contact-style_form__LZR+X\",\"inputLabel\":\"Contact-style_inputLabel__GZXUl\"};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFiltr = state => state.filter.value;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFiltr],\n  (contacts, filterValue) => {\n    return contacts.filter(({ name }) => {\n      const normalizedName = name.toLowerCase();\n      return normalizedName.includes(filterValue);\n    });\n  }\n);\n","import React from \"react\";\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from \"yup\";\nimport css from './Contact-style.module.css'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from \"redux/contacts/selectors\";\nimport { addContact } from 'redux/contacts/operation';\n\nexport const ContactForm = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n\n    const handleSubmit = ({ name, number }, { resetForm }) => {\n        // Перевірка чи вже є контакт з таким іменем\n        const AddedContactCheck = contacts.find(contact => {\n            return contact.name.toLowerCase() === name.toLowerCase();\n        });\n        if (AddedContactCheck) {\n            return alert(`${AddedContactCheck.name} is already in contacts`);\n        };\n\n        dispatch(addContact({ name, number }));\n        resetForm();\n    };\n\n    return (\n        <Formik\n            initialValues={{ name: '', number: '' }}\n            onSubmit={handleSubmit}\n            validationSchema={Yup.object().shape({\n                name: Yup.string()\n                    .required(\"Name Required\")\n                    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, \"Must Contain only letter\"),\n                number: Yup.number()\n                    .positive()\n                    .required(\"Phone number Required\")\n            })}\n        >\n            <Form className={css.form}>\n                <label htmlFor=\"name\" className={css.inputLabel}> <span>Name</span>\n                    <Field\n                        type=\"text\"\n                        name=\"name\"\n                        maxLength=\"20\"\n                        placeholder=\"Add the name\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        required\n                    />\n                </label>\n                <label htmlFor=\"number\" className={css.inputLabel}><span>Number</span>\n                    <Field\n                        type=\"tel\"\n                        name=\"number\"\n                        minLength=\"10\"\n                        maxLength=\"11\"\n                        placeholder=\"Add the phone number\"\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        required\n                    />\n                </label>\n                <button type='submit'>Add contact</button>\n            </Form>\n        </Formik>\n    )\n\n\n\n\n\n}\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"filterDiv\":\"Filter-style_filterDiv__sXRUb\"};","import css from './Filter-style.module.css'\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/filtrSlice';\n\n\nexport const Filter = () => {\n    const dipatch = useDispatch();\n\n    return (\n        <div className={css.filterDiv}>\n            <label htmlFor=\"search\">Find contacts by name</label>\n            <input name=\"search\" onChange={e => dipatch(setFilter(e.target.value))} />\n        </div>\n    );\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"List-style_contactList__BS8lk\",\"contactItem\":\"List-style_contactItem__qZYlO\",\"deleteButton\":\"List-style_deleteButton__dIqqQ\"};","import { useDispatch } from 'react-redux';\nimport { deleteContact, editContact } from 'redux/contacts/operation';\nimport { Formik, Form, Field } from 'formik';\nimport css from './List-style.module.css';\nimport { useState } from 'react';\nimport * as Yup from \"yup\";\n\nexport const ContactItem = ({ contact }) => {\n    const { id, name, number } = contact;\n    const [isEdit, setIsEdit] = useState(false);\n\n\n    const dispatch = useDispatch();\n    const handleDelete = () => dispatch(deleteContact(id));\n    const handleEdit = () => {\n        setIsEdit(true);\n\n    };\n    const handleCancel = () => setIsEdit(false);\n    const handleSubmit = (data) => {\n        try {\n\n            dispatch(editContact({ id, ...data }))\n            setIsEdit(false);\n        } catch (e) { console.log(e) }\n    }\n\n    return (\n        <li className={css.contactItem}>\n            <Formik\n                initialValues={{ name, number }}\n                onSubmit={handleSubmit}\n                validationSchema={Yup.object().shape({\n                    name: Yup.string()\n                        .required(\"Name Required\")\n                        .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, \"Must Contain only letter\"),\n                    number: Yup.number()\n                        .positive()\n                        .required(\"Phone number Required\")\n                })}>\n                <Form>\n                    <Field\n                        type=\"text\"\n                        name=\"name\"\n                        maxLength=\"20\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        required\n                        disabled={!isEdit}\n\n                    />\n                    <Field\n                        type=\"tel\"\n                        name=\"number\"\n                        minLength=\"10\"\n                        maxLength=\"11\"\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        required\n                        disabled={!isEdit}\n\n                    />\n                    {isEdit &&\n                        <><button className={css.deleteButton} type='submit'>Confirm</button>\n                            <button onClick={handleCancel} className={css.deleteButton} type='button'>Cancel</button>\n                        </>}\n\n                </Form>\n\n\n            </Formik>\n            {!isEdit &&\n                <>\n                    <button onClick={handleEdit} className={css.deleteButton}>Edit</button>\n                    <button onClick={handleDelete} className={css.deleteButton}>Delete</button>\n                </>}\n        </li>\n    );\n}\n\n\n\n","import css from './List-style.module.css';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from \"redux/contacts/selectors\";\nimport { ContactItem } from './ContactItem';\n\nexport const ContactList = () => {\n    // Отримання даних контактів для відображення\n    const contactsToMarkup = useSelector(selectVisibleContacts);\n\n    return (\n        <>\n            {!contactsToMarkup.length && <b>This contact is not found</b>}\n            <ul className={css.contactList}>\n                {contactsToMarkup.map((contact) => {\n\n                    return (\n                        <ContactItem key={contact.id} contact={contact} />\n                    )\n                })}\n            </ul>\n        </>\n    );\n};\n\n\n\n\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from '../redux/contacts/operation';\nimport { selectIsLoading, selectError, selectContacts } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <div style={appSlyle}>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <div>{isLoading && 'Request in progress...'}</div>\n        {contacts.length ? <Filter /> : <p>'No contacts yet'</p>}\n        {error && <b>{error}</b>}\n        {!!contacts.length && <ContactList />}\n        \n      </div>\n    </>\n  );\n}\n\n\nconst appSlyle = {\n  height: '100vh',\n  display: 'flex',\n  flexDirection: 'column',\n  gap: 20,\n\n  alignItems: 'center',\n  fontSize: 40,\n  color: '#010101'\n}"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","value","filterValue","name","toLowerCase","includes","ContactForm","dispatch","useDispatch","useSelector","initialValues","number","onSubmit","resetForm","AddedContactCheck","find","contact","alert","addContact","validationSchema","Yup","shape","required","matches","positive","className","css","htmlFor","type","maxLength","placeholder","title","minLength","Filter","dipatch","onChange","e","setFilter","target","ContactItem","id","useState","isEdit","setIsEdit","data","editContact","console","log","disabled","onClick","deleteContact","ContactList","contactsToMarkup","length","map","Contacts","useEffect","fetchContacts","Helmet","style","appSlyle","height","display","flexDirection","gap","alignItems","fontSize","color"],"sourceRoot":""}